rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // FUNÇÕES AUXILIARES DE SEGURANÇA
    // ============================================
    
    // Verifica se o usuário é administrador via custom claims
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Verifica se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verifica se é o próprio usuário
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Valida formato de email
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Valida CPF (formato básico)
    function isValidCPF(cpf) {
      return cpf.matches('^[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}-[0-9]{2}$');
    }
    
    // Valida telefone brasileiro
    function isValidPhone(phone) {
      return phone.matches('^\\+55[0-9]{10,11}$');
    }
    
    // Valida tamanho de string
    function isValidStringLength(str, minLen, maxLen) {
      return str.size() >= minLen && str.size() <= maxLen;
    }
    
    // ============================================
    // REGRAS DE BLOG (PRIORIDADE ALTA)
    // ============================================
    
    match /blog_posts/{postId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();
    }
    
    // ============================================
    // REGRAS DE USUÁRIOS
    // ============================================
    
    match /users/{userId} {
      allow read, write: if isAdmin();
      allow read: if isOwner(userId);
      
      allow create: if isAuthenticated() && 
                       isOwner(userId) &&
                       request.resource.data.keys().hasAll(['name', 'email', 'cpf', 'phone', 'createdAt', 'role']) &&
                       isValidEmail(request.resource.data.email) &&
                       isValidCPF(request.resource.data.cpf) &&
                       isValidPhone(request.resource.data.phone) &&
                       isValidStringLength(request.resource.data.name, 3, 100) &&
                       request.resource.data.role == 'user' &&
                       request.resource.data.createdAt == request.time;
      
      allow update: if isOwner(userId) &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.email == resource.data.email;
    }
    
    // ============================================
    // REGRAS DE PROCESSOS
    // ============================================
    
    match /processes/{processId} {
      allow read, write: if isAdmin();
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'description', 'status', 'userId', 'createdAt']) &&
                       isValidStringLength(request.resource.data.title, 3, 200) &&
                       isValidStringLength(request.resource.data.description, 10, 5000) &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.createdAt == request.time;
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.status == resource.data.status &&
                       request.resource.data.createdAt == resource.data.createdAt;
    }
    
    // ============================================
    // REGRAS DE PLANOS DE PAGAMENTO
    // ============================================
    
    match /payment_plans/{planId} {
      allow read, write: if isAdmin();
      allow list: if isAuthenticated();
      allow get: if isAuthenticated() && 
                    (resource == null || resource.data.userId == request.auth.uid);
    }
    
    // ============================================
    // REGRAS DE MENSAGENS DE CONTATO
    // ============================================
    
    match /contact_messages/{messageId} {
      allow create: if true;
      
      allow read, delete: if isAdmin();
    }
    
    // ============================================
    // REGRAS DE SOLICITAÇÕES DE ORÇAMENTO
    // ============================================
    
    match /contact_requests/{requestId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'phone', 'createdAt']) &&
                       isValidEmail(request.resource.data.email) &&
                       isValidStringLength(request.resource.data.name, 2, 100) &&
                       isValidStringLength(request.resource.data.phone, 10, 20) &&
                       request.resource.data.createdAt is string;
      
      allow read, delete: if isAdmin();
    }
    
    // ============================================
    // REGRAS DE LOGS DE ATIVIDADE
    // ============================================
    
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['action', 'description', 'userId', 'timestamp']) &&
                       isValidStringLength(request.resource.data.action, 3, 100) &&
                       isValidStringLength(request.resource.data.description, 3, 1000) &&
                       request.resource.data.timestamp is string;
    }
    
    // ============================================
    // BLOQUEIO PADRÃO
    // ============================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
